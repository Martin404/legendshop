<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-3.0.xsd" default-lazy-init="true">
    <global-method-security pre-post-annotations="enabled">
    </global-method-security>
    
	<http access-denied-page="/common/jsp/401.jsp"  entry-point-ref="authenticationProcessingFilterEntryPoint">
	<!-- 
		<intercept-url pattern="/login.jsp" filters="none" />
		-->
		<intercept-url pattern="/admin/**" access="ROLE_SUPERVISOR,ROLE_ADMIN" />		
		<intercept-url pattern="/member/user/**" access="ROLE_SUPERVISOR" />
		<intercept-url pattern="/member/right/**" access="ROLE_SUPERVISOR" />
		<intercept-url pattern="/member/**" access="ROLE_SUPERVISOR,ROLE_ADMIN" />
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
			<custom-filter ref="validateCodeAuthenticationFilter" position="FORM_LOGIN_FILTER" />
			<custom-filter ref="_logoutFilter" position="LOGOUT_FILTER" />
		<http-basic />
		<remember-me />
	</http>


  <beans:bean id="_logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
	  <beans:constructor-arg index="0" value="/" />
	  <beans:constructor-arg index="1">
	   <beans:list>
	    <beans:bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
	    <beans:bean class="com.legendshop.business.helper.SecurityContextLogoutHandlerImpl" />
	   </beans:list>
	  </beans:constructor-arg>
	  <beans:property name="filterProcessesUrl" value="/logout.jsp"/>
 </beans:bean>
 
	
	<beans:bean id="validateCodeAuthenticationFilter"
		class="com.legendshop.business.service.ValidateCodeUsernamePasswordAuthenticationFilter">
		<beans:property name="filterProcessesUrl" value="/j_spring_security_check"></beans:property>
		<beans:property name="authenticationSuccessHandler"
			ref="loginLogAuthenticationSuccessHandler"></beans:property>
		<beans:property name="authenticationFailureHandler"
			ref="simpleUrlAuthenticationFailureHandler"></beans:property>
		<beans:property name="authenticationManager" ref="authenticationManager"></beans:property>
		<beans:property name="loginHistoryService" ref="loginHistoryService"></beans:property>
		<beans:property name="basketDao" ref="basketDao"></beans:property>
	</beans:bean>
	
	<beans:bean id="loginLogAuthenticationSuccessHandler"
		class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
		<beans:property name="defaultTargetUrl" value="/index${WEB_SUFFIX}"></beans:property>
		<beans:property name="redirectStrategy" ref="originUrlRedirectStrategy"></beans:property>
	</beans:bean>

	<beans:bean id="originUrlRedirectStrategy" class="com.legendshop.core.security.OriginUrlRedirectStrategy">
	</beans:bean>
	
	<beans:bean id="simpleUrlAuthenticationFailureHandler"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<beans:property name="defaultFailureUrl" value="/login${WEB_SUFFIX}?error=true"></beans:property>
	</beans:bean>

	<!-- 一个自定义的filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性，
	我们的所有控制将在这三个类中实现，解释详见具体配置 
	<beans:bean id="myFilter" class="com.legendshop.core.security.MyFilterSecurityInterceptor">
		<beans:property name="authenticationManager"
			ref="authenticationManager" />
		<beans:property name="accessDecisionManager"
			ref="accessDecisionManager" />
		<beans:property name="securityMetadataSource"
			ref="securityMetadataSource" />
	</beans:bean>
	-->
	<!-- 认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="authService">
			<!--   如果用户的密码采用加密的话，可以加点“盐”
				<password-encoder hash="md5" />
			-->
			  <password-encoder ref="passwordEncoder">
			    <salt-source user-property="username"/>
			  </password-encoder>
			  
		</authentication-provider>
	</authentication-manager>
	
		<!-- 使用Md5算法加密 -->
	<beans:bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" >
		<beans:property name="encodeHashAsBase64" value="false"></beans:property>
	</beans:bean>
	
	<beans:bean id="authService" class="com.legendshop.business.service.impl.AuthServiceImpl">
	    <beans:property name="functionCache" ref="functionRoleCache" />
        <beans:property name="roleCache" ref="roleCache" />
        <beans:property name="authorityUserCache" ref="authorityUserCache" />
		<beans:property name="jdbcTemplate" ref="jdbcTemplate" />
    </beans:bean>

	<!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源
	<beans:bean id="myAccessDecisionManagerBean"
		class="com.legendshop.core.security.MyAccessDecisionManager">
	</beans:bean>
	 -->
	<beans:bean id="accessDecisionManager"
		class="org.springframework.security.access.vote.AffirmativeBased">
		<beans:property name="allowIfAllAbstainDecisions" value="false" />
		<beans:property name="decisionVoters">
			<beans:list>
				<beans:bean class="org.springframework.security.access.vote.RoleVoter" />
				<beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</beans:list>
		</beans:property>
	</beans:bean>
	
	
	<!-- 资源源数据定义，即定义某一资源可以被哪些角色访问 
	<beans:bean id="securityMetadataSource"
		class="com.legendshop.core.security.MyInvocationSecurityMetadataSource" />
	-->
	<beans:bean id="authenticationProcessingFilterEntryPoint"
		class="org.springframework.security.web.authentication.AuthenticationProcessingFilterEntryPoint">
		<beans:property name="loginFormUrl" value="/login${WEB_SUFFIX}"></beans:property>
	</beans:bean>
	
	<beans:bean id="loginHistoryService" class="com.legendshop.business.service.impl.LoginHistoryServiceImpl">
        <beans:property name="jdbcTemplate" ref="jdbcTemplate"></beans:property>
        <beans:property name="baseDao" ref="baseDao"></beans:property>
        <beans:property name="threadPoolExecutor" ref="threadPoolExecutor"></beans:property>
    </beans:bean>
    
   <beans:bean id="functionRoleCache" class="com.legendshop.core.security.cache.EhCacheBasedFunctionCache">
     <beans:property name="cache" ref="functionCacheBackend"></beans:property>
  </beans:bean>
    
        <!-- 根据 role 查 function -->
  <beans:bean id="functionCacheBackend" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
     <beans:property name="cacheManager" ref="cacheManager"> </beans:property>
     <beans:property name="cacheName" value="functionRoleCache"></beans:property>
  </beans:bean>
  
   <beans:bean id="roleCache" class="com.legendshop.core.security.cache.EhCacheRoleByName">
     <beans:property name="cache" ref="roleCacheBackend"></beans:property>
  </beans:bean>
   <!-- 根据rolename 查 role -->
  <beans:bean id="roleCacheBackend" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
     <beans:property name="cacheManager" ref="cacheManager"></beans:property>
     <beans:property name="cacheName" value="roleCache"></beans:property>
  </beans:bean> 
  
   <beans:bean id="authorityUserCache" class="com.legendshop.core.security.cache.EhCacheBasedUserAuthorityCache">
     <beans:property name="cache" ref="authorityUserCacheBackend"></beans:property>
  </beans:bean>	
  
      <!-- 根据 user 查 role -->
  <beans:bean id="authorityUserCacheBackend" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
     <beans:property name="cacheManager" ref="cacheManager"></beans:property>
     <beans:property name="cacheName" value="authorityUserCache"></beans:property>
  </beans:bean>
  
</beans:beans>
