<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:oxm="http://www.springframework.org/schema/oxm"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
                http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
                http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
                http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-3.0.xsd" default-lazy-init="true">

	<bean id="UserDao" class="com.legendshop.permission.dao.UserDao" parent="baseDao">
		<property name="findByName">
			<value>from User u where u.name = ?</value>
		</property>
		<property name="findUserRoleByRoleId">
			<value>from UserRole ur where ur.id.roleId=?</value>
		</property>
		<property name="findUserRoleByUserId">
			<value>from UserRole ur where ur.id.userId=?</value>
		</property>
	</bean>
	 <bean id="FunctionDao" class="com.legendshop.permission.dao.FunctionDao" parent="baseDao">
		<property name="findFunctionByRoleId">
			<value>select f from Role r,Permission p,Function f where r.id=p.id.roleId and f.id=p.id.functionId and r.id = ?</value>
		</property>
		<property name="findOtherFunctionByRoleId">
			<value>from Function where id not in (select f.id from Role r,Permission p,Function f where r.id=p.id.roleId and f.id=p.id.functionId and r.id = ?)</value>
		</property>
		<property name="findOtherFunctionByRoleIdHQL">
			<value>from Function where id not in (select f.id from Role r,Permission p,Function f where r.id=p.id.roleId and f.id=p.id.functionId and r.id = ?) order by name</value>
		</property>
		<property name="findOtherFunctionByRoleIdHQLCount">
			<value>select count(*) from Function where id not in (select f.id from Role r,Permission p,Function f where r.id=p.id.roleId and f.id=p.id.functionId and r.id = ?) order by name</value>
		</property>
	</bean>
	 <bean id="RoleDao" class="com.legendshop.permission.dao.RoleDao" parent="baseDao">
		<property name="findRoleByFunction">
			<value>select r from Role r,Permission p,Function f where r.id=p.id.roleId and f.id=p.id.functionId and f.id = ?</value>
		</property>
		<property name="findRoleByUserId">
			<value>select r from Role r,UserRole ur,User u where r.id=ur.id.roleId and u.id=ur.id.userId and u.id = ?</value>
		</property>
		<property name="findOtherRoleByUser">
			<value>from Role where id not in (select r.id from Role r,UserRole ur,User u where r.id=ur.id.roleId and u.id=ur.id.userId and u.id = ?)</value>
		</property>
		<property name="findOtherRoleByUserCount">
			<value>select count(*) from Role where id not in (select r.id from Role r,UserRole ur,User u where r.id=ur.id.roleId and u.id=ur.id.userId and u.id = ?)</value>
		</property>
	</bean>
	
</beans>
